library("pROC")
library("ROSE")
fp <- "../data/cervical.csv"
ds <- read.csv(fp)
# List of columns to convert to factors
col_to_factor <- c(
"Smokes",
"Hormonal.Contraceptives",
"IUD",
"STDs",
"STDs.condylomatosis",
"STDs.cervical.condylomatosis",
"STDs.vaginal.condylomatosis",
"STDs.vulvo.perineal.condylomatosis",
"STDs.syphilis",
"STDs.pelvic.inflammatory.disease",
"STDs.genital.herpes",
"STDs.molluscum.contagiosum",
"STDs.AIDS",
"STDs.HIV",
"STDs.Hepatitis.B",
"STDs.HPV",
"Dx.Cancer",
"Dx.CIN",
"Dx.HPV",
"Dx",
"Hinselmann",
"Schiller",
"Citology",
"Biopsy"
)
# List of columns to convert to numeric
col_to_numeric <- c(
"Number.of.sexual.partners",
"First.sexual.intercourse",
"Num.of.pregnancies",
"Smokes..years.",
"Smokes..packs.year.",
"Hormonal.Contraceptives..years.",
"STDs..Number.of.diagnosis",
"STDs..Time.since.first.diagnosis",
"STDs..Time.since.last.diagnosis",
"IUD..years.",
"STDs..number."
)
# Replace "?" with NA and convert data types
ds[c(col_to_factor, col_to_numeric)] <- lapply(ds[c(col_to_factor, col_to_numeric)], function(x) {
x[x == "?"] <- NA
return(x)
})
# Converting columns to factors
ds[col_to_factor] <- lapply(ds[col_to_factor], factor)
# Converting columns to numeric
ds[col_to_numeric] <- lapply(ds[col_to_numeric], as.numeric)
ds
str(ds)
ds$Dx.Cancer <- factor(ds$Dx.Cancer,
levels = levels(ds$Dx.Cancer),
labels = make.names(levels(ds$Dx.Cancer), unique = TRUE))
# Renaming the columns for better readability
names(ds) <- c("Age", "NumSexualPartners", "FirstSexualIntercoarse", "NumPregnancies", "Smokes", "SmokesYears", "SmokesPacksYear", "HormonalContraceptives", "HormonalContraceptivesYears", "IUD", "IUDYears", "STDs", "STDsNumber", "STDsCondylomatosis", "STDsCervicalCondylomatosis", "STDsVaginalCondylomatosis", "STDsVulvoPerinealCondylomatosis", "STDsSyphilis", "STDsPelvicInflammatoryDisease", "STDsGenitalHerpes", "STDsMolluscumContagiosum", "STDsAIDS", "STDsHIV", "STDsHepatitisB", "STDsHPV", "STDsNumDiagnosis", "STDsTimeSinceFirstDiagnosis", "STDsTimeSinceLastDiagnosis", "DxCancer", "DxCIN", "DxHPV", "Dx", "Hinselmann", "Schiller", "Citology", "Biopsy")
str(ds)
library("e1071")
library("caret")
library("pROC")
library("ROSE")
fp <- "../data/cervical.csv"
ds <- read.csv(fp)
# List of columns to convert to factors
col_to_factor <- c(
"Smokes",
"Hormonal.Contraceptives",
"IUD",
"STDs",
"STDs.condylomatosis",
"STDs.cervical.condylomatosis",
"STDs.vaginal.condylomatosis",
"STDs.vulvo.perineal.condylomatosis",
"STDs.syphilis",
"STDs.pelvic.inflammatory.disease",
"STDs.genital.herpes",
"STDs.molluscum.contagiosum",
"STDs.AIDS",
"STDs.HIV",
"STDs.Hepatitis.B",
"STDs.HPV",
"Dx.Cancer",
"Dx.CIN",
"Dx.HPV",
"Dx",
"Hinselmann",
"Schiller",
"Citology",
"Biopsy"
)
# List of columns to convert to numeric
col_to_numeric <- c(
"Number.of.sexual.partners",
"First.sexual.intercourse",
"Num.of.pregnancies",
"Smokes..years.",
"Smokes..packs.year.",
"Hormonal.Contraceptives..years.",
"STDs..Number.of.diagnosis",
"STDs..Time.since.first.diagnosis",
"STDs..Time.since.last.diagnosis",
"IUD..years.",
"STDs..number."
)
# Replace "?" with NA and convert data types
ds[c(col_to_factor, col_to_numeric)] <- lapply(ds[c(col_to_factor, col_to_numeric)], function(x) {
x[x == "?"] <- NA
return(x)
})
# Converting columns to factors
ds[col_to_factor] <- lapply(ds[col_to_factor], factor)
# Converting columns to numeric
ds[col_to_numeric] <- lapply(ds[col_to_numeric], as.numeric)
ds$Dx.Cancer <- factor(ds$Dx.Cancer,
levels = levels(ds$Dx.Cancer),
labels = make.names(levels(ds$Dx.Cancer), unique = TRUE))
# Renaming the columns for better readability
names(ds) <- c("Age", "NumSexualPartners", "FirstSexualIntercoarse", "NumPregnancies", "Smokes", "SmokesYears", "SmokesPacksYear", "HormonalContraceptives", "HormonalContraceptivesYears", "IUD", "IUDYears", "STDs", "STDsNumber", "STDsCondylomatosis", "STDsCervicalCondylomatosis", "STDsVaginalCondylomatosis", "STDsVulvoPerinealCondylomatosis", "STDsSyphilis", "STDsPelvicInflammatoryDisease", "STDsGenitalHerpes", "STDsMolluscumContagiosum", "STDsAIDS", "STDsHIV", "STDsHepatitisB", "STDsHPV", "STDsNumDiagnosis", "STDsTimeSinceFirstDiagnosis", "STDsTimeSinceLastDiagnosis", "DxCancer", "DxCIN", "DxHPV", "Dx", "Hinselmann", "Schiller", "Citology", "Biopsy")
# Excluding target variables from the dataset
ds <- ds[ , !(names(ds) %in% c("DxCIN", "DxHPV", "Dx", "Hinselmann", "Schiller", "Citology", "Biopsy"))]
colnames(ds)[colnames(ds) == "DxCancer"] <- "Dx"
# Final selection of variables for the current analysis
ds <- ds[ , (names(ds) %in% c("Dx", "Age", "NumSexualPartners", "FirstSexualIntercoarse", "NumPregnancies", "SmokesPacksYear", "HormonalContraceptivesYears", "IUDYears", "STDsNumDiagnosis"))]
set.seed(7)
training_indices <- createDataPartition(ds$Dx, p = 0.8, list = FALSE)
training_data <- ds[training_indices, ]
testing_data <- ds[-training_indices, ]
# Remove NAs
training_data_cleaned <- na.omit(training_data)
# Remove constant variables from the dataset
constant_vars <- sapply(training_data_cleaned, function(x) length(unique(x))) == 1
training_data_cleaned <- training_data_cleaned[, !constant_vars]
set.seed(123)
training_data_cleaned <- ovun.sample(Dx ~ ., data = training_data_cleaned, method = "both", p = 0.5, seed = 123, N = 1600)$data
# Check the new distribution of the target variable after balancing
table(training_data_cleaned$Dx)
# Setup for cross-validation
control <- trainControl(method="repeatedcv",
number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions=TRUE,
repeats=3)
# Train SVM with Linear Kernel on balanced data
set.seed(7)
svm_linear <- train(Dx ~ ., data = training_data_cleaned,
method="svmLinear",
metric="ROC",
trControl=control,
tuneLength=10)
# Train SVM with Radial Kernel on balanced data
set.seed(7)
svm_radial <- train(Dx ~ ., data = training_data_cleaned,
method="svmRadial",
metric="ROC",
trControl=control,
tuneLength=10)
set.seed(7)
training_indices <- createDataPartition(ds$Dx, p = 0.8, list = FALSE)
training_data <- ds[training_indices, ]
testing_data <- ds[-training_indices, ]
# Remove NAs
training_data_cleaned <- na.omit(training_data)
# Remove constant variables from the dataset
constant_vars <- sapply(training_data_cleaned, function(x) length(unique(x))) == 1
training_data_cleaned <- training_data_cleaned[, !constant_vars]
set.seed(123)
training_data_cleaned <- ovun.sample(Dx ~ ., data = training_data_cleaned, method = "both", p = 0.5, seed = 123, N = 1600)$data
# Check the new distribution of the target variable after balancing
table(training_data_cleaned$Dx)
# Setup for cross-validation
control <- trainControl(method="repeatedcv",
number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions=TRUE,
repeats=3)
# Train SVM with Linear Kernel on balanced data
set.seed(7)
svm_linear <- train(Dx ~ ., data = training_data_cleaned,
method="svmLinear",
metric="ROC",
trControl=control,
tuneLength=10)
# Train SVM with Radial Kernel on balanced data
set.seed(7)
svm_radial <- train(Dx ~ ., data = training_data_cleaned,
method="svmRadial",
metric="ROC",
trControl=control,
tuneLength=10)
# Summarize and compare model performance
fit_models <- list(Linear = svm_linear, Radial = svm_radial)
results <- resamples(fit_models)
print(summary(results))
# ROC plots
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
plot(roc_data_radial, add=TRUE, col="red")
legend("bottomright", legend=c("Linear SVM", "Radial SVM"), col=c("blue", "red"), lwd=2)
dotplot(results)
print(svm_linear)
getModelInfo("svmLinear")$svmLinear$parameters
print(svm_radial)
getModelInfo("svmRadial")$svmRadial$parameters
myGrid <- expand.grid(C = c(1, 2, 4, 8), sigma = 0.09382649)
set.seed(7)
fit_svm_radial_tune <- train(Dx ~ ., data = training_data_balanced,
method = "svmRadial",
metric = "ROC",
trControl = control,
tuneGrid = myGrid)
myGrid <- expand.grid(C = c(1, 2, 4, 8), sigma = 0.09382649)
set.seed(7)
fit_svm_radial_tune <- train(Dx ~ ., data = training_data_cleaned,
method = "svmRadial",
metric = "ROC",
trControl = control,
tuneGrid = myGrid)
# Summarize accuracy of models including the tuned radial model
fit_models <- list(Linear = svm_linear, Radial = svm_radial, TunedRadial = fit_svm_radial_tune)
results <- resamples(fit_models)
print(summary(results))
dotplot(results)
roc_data_tuned_radial <- roc(response=fit_svm_radial_tune$pred$obs, predictor=fit_svm_radial_tune$pred$X1)
roc_data_tuned_radial
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
roc_data_tuned_radial <- roc(response=fit_svm_radial_tune$pred$obs, predictor=fit_svm_radial_tune$pred$X1)
# ROC plot for Linear SVM
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
# Add ROC plot for Radial SVM
plot(roc_data_radial, add=TRUE, col="red")
# Add ROC plot for Tuned Radial SVM
plot(fit_svm_radial_tune, add=TRUE, col="green")
legend("bottomright", legend=c("Linear SVM", "Radial SVM","Radial Tuned"), col=c("blue", "red", "green"), lwd=2)
svm_radial_tune
# IMPORTS
library("e1071")
library("caret")
library("pROC")
dataset <- read.csv("data/dataR2.csv")
dataset$Classification <- as.factor(dataset$Classification)
levels(dataset$Classification) <- make.names(levels(dataset$Classification), unique=TRUE)
# learn SVM with radial kernel (all features)
svm_all <- svm(Classification ~., data=dataset)
summary(svm_all)
plot(
svm_all,
data=dataset,
Glucose ~ Age,
svSymbol=17,
dataSymbol=20,
symbolPalette=c(2,3),
color.palette=grey.colors,
slice=list(
# Age=59.01,
BMI=27.95,
# Glucose=98.65,
Insulin=10.623,
HOMA=2.9147,
Adiponectin=10.153,
Resistin=15.13,
MCP.1=554.98
)
)
# RUN ALGORITHMS USING 3 TIMES 10-FOLD CROSS VALIDATION
metric <- "ROC"
control <- trainControl(
method="repeatedcv",
number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions=TRUE,
repeats=3
)
set.seed(7)
fit_svm_linear <- train(
Classification ~ .,
data=dataset,
method="svmLinear",
metric=metric,
trControl=control,
preProcess=c("center","scale"),
tuneLength=10
)
set.seed(7)
fit_svm_radial <- train(
Classification ~ .,
data=dataset,
method="svmRadial",
metric=metric,
trControl=control,
preProcess=c("center","scale"),
tuneLength=10
)
# SUMMARIZE ACCURACY OF MODELS
fit_models <- list(fit_svm_linear, fit_svm_radial)
results <- resamples(fit_models)
summary(results)
# ROC curves for models
par(mfrow=c(1,2))
rocs <- lapply(
fit_models,
function(fit){
plot.roc(
fit$pred$obs,
fit$pred$X2,
main=paste("3 x 10-fold CV -", fit$method),
debug=FALSE,
print.auc=TRUE
)
}
)
# COMPARE ACCURACY OF MODELS
dotplot(results)
print(fit_svm_linear)
getModelInfo(fit_svm_linear)$svmLinear$parameters
print(fit_svm_radial)
getModelInfo(fit_svm_radial)$svmRadial$parameters
# ROC COMPLEXITY FOR MODELS
plot(fit_svm_radial)
# INSPECT MODELS
print(fit_svm_linear)
getModelInfo(fit_svm_linear)$svmLinear$parameters
library("e1071")
library("caret")
library("pROC")
library("ROSE")
fp <- "../data/cervical.csv"
ds <- read.csv(fp)
# List of columns to convert to factors
col_to_factor <- c(
"Smokes",
"Hormonal.Contraceptives",
"IUD",
"STDs",
"STDs.condylomatosis",
"STDs.cervical.condylomatosis",
"STDs.vaginal.condylomatosis",
"STDs.vulvo.perineal.condylomatosis",
"STDs.syphilis",
"STDs.pelvic.inflammatory.disease",
"STDs.genital.herpes",
"STDs.molluscum.contagiosum",
"STDs.AIDS",
"STDs.HIV",
"STDs.Hepatitis.B",
"STDs.HPV",
"Dx.Cancer",
"Dx.CIN",
"Dx.HPV",
"Dx",
"Hinselmann",
"Schiller",
"Citology",
"Biopsy"
)
# List of columns to convert to numeric
col_to_numeric <- c(
"Number.of.sexual.partners",
"First.sexual.intercourse",
"Num.of.pregnancies",
"Smokes..years.",
"Smokes..packs.year.",
"Hormonal.Contraceptives..years.",
"STDs..Number.of.diagnosis",
"STDs..Time.since.first.diagnosis",
"STDs..Time.since.last.diagnosis",
"IUD..years.",
"STDs..number."
)
# Replace "?" with NA and convert data types
ds[c(col_to_factor, col_to_numeric)] <- lapply(ds[c(col_to_factor, col_to_numeric)], function(x) {
x[x == "?"] <- NA
return(x)
})
# Converting columns to factors
ds[col_to_factor] <- lapply(ds[col_to_factor], factor)
# Converting columns to numeric
ds[col_to_numeric] <- lapply(ds[col_to_numeric], as.numeric)
ds$Dx.Cancer <- factor(ds$Dx.Cancer,
levels = levels(ds$Dx.Cancer),
labels = make.names(levels(ds$Dx.Cancer), unique = TRUE))
# Renaming the columns for better readability
names(ds) <- c("Age", "NumSexualPartners", "FirstSexualIntercoarse", "NumPregnancies", "Smokes", "SmokesYears", "SmokesPacksYear", "HormonalContraceptives", "HormonalContraceptivesYears", "IUD", "IUDYears", "STDs", "STDsNumber", "STDsCondylomatosis", "STDsCervicalCondylomatosis", "STDsVaginalCondylomatosis", "STDsVulvoPerinealCondylomatosis", "STDsSyphilis", "STDsPelvicInflammatoryDisease", "STDsGenitalHerpes", "STDsMolluscumContagiosum", "STDsAIDS", "STDsHIV", "STDsHepatitisB", "STDsHPV", "STDsNumDiagnosis", "STDsTimeSinceFirstDiagnosis", "STDsTimeSinceLastDiagnosis", "DxCancer", "DxCIN", "DxHPV", "Dx", "Hinselmann", "Schiller", "Citology", "Biopsy")
# Excluding target variables from the dataset
ds <- ds[ , !(names(ds) %in% c("DxCIN", "DxHPV", "Dx", "Hinselmann", "Schiller", "Citology", "Biopsy"))]
colnames(ds)[colnames(ds) == "DxCancer"] <- "Dx"
# Final selection of variables for the current analysis
ds <- ds[ , (names(ds) %in% c("Dx", "Age", "NumSexualPartners", "FirstSexualIntercoarse", "NumPregnancies", "SmokesPacksYear", "HormonalContraceptivesYears", "IUDYears", "STDsNumDiagnosis"))]
set.seed(7)
training_indices <- createDataPartition(ds$Dx, p = 0.8, list = FALSE)
training_data <- ds[training_indices, ]
testing_data <- ds[-training_indices, ]
# Remove NAs
training_data_cleaned <- na.omit(training_data)
# Remove constant variables from the dataset
constant_vars <- sapply(training_data_cleaned, function(x) length(unique(x))) == 1
training_data_cleaned <- training_data_cleaned[, !constant_vars]
set.seed(123)
training_data_cleaned <- ovun.sample(Dx ~ ., data = training_data_cleaned, method = "both", p = 0.5, seed = 123, N = 1600)$data
# Check the new distribution of the target variable after balancing
table(training_data_cleaned$Dx)
# Setup for cross-validation
control <- trainControl(method="repeatedcv",
number=10,
summaryFunction=twoClassSummary,
classProbs=TRUE,
savePredictions=TRUE,
repeats=3)
# Train SVM with Linear Kernel on balanced data
set.seed(7)
svm_linear <- train(Dx ~ ., data = training_data_cleaned,
method="svmLinear",
metric="ROC",
trControl=control,
tuneLength=10)
# Train SVM with Radial Kernel on balanced data
set.seed(7)
svm_radial <- train(Dx ~ ., data = training_data_cleaned,
method="svmRadial",
metric="ROC",
trControl=control,
tuneLength=10)
# Summarize and compare model performance
fit_models <- list(Linear = svm_linear, Radial = svm_radial)
results <- resamples(fit_models)
print(summary(results))
# ROC plots
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
plot(roc_data_radial, add=TRUE, col="red")
legend("bottomright", legend=c("Linear SVM", "Radial SVM"), col=c("blue", "red"), lwd=2)
dotplot(results)
# Inspect Models
print(svm_linear)
getModelInfo("svmLinear")$svmLinear$parameters
print(svm_radial)
getModelInfo("svmRadial")$svmRadial$parameters
myGrid <- expand.grid(C = c(1, 2, 4, 8), sigma = 0.09382649)
set.seed(7)
fit_svm_radial_tune <- train(Dx ~ ., data = training_data_cleaned,
method = "svmRadial",
metric = "ROC",
trControl = control,
tuneGrid = myGrid)
# Summarize accuracy of models including the tuned radial model
fit_models <- list(Linear = svm_linear, Radial = svm_radial, TunedRadial = fit_svm_radial_tune)
results <- resamples(fit_models)
print(summary(results))
# Plotting ROC Curves for both models
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
dotplot(results)
# INSPECT MODELS
print(fit_svm_linear)
# INSPECT MODELS
print(svm_linear)
getModelInfo(svm_linear)$svmLinear$parameters
print(svm_radial)
getModelInfo(svm_radial)$svmRadial$parameters
# ROC COMPLEXITY FOR MODELS
plot(svm_radial)
# ROC COMPLEXITY FOR MODELS
print(fit_svm_radial_tune)
# ROC plots
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_linear
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
svm_linear
fit_svm_radial_tune
myGrid <- expand.grid(C = c(1, 2, 4, 8), sigma = 0.09382649)
set.seed(7)
fit_svm_radial_tune <- train(Dx ~ ., data = training_data_cleaned,
method = "svmRadial",
metric = "ROC",
trControl = control,
tuneGrid = myGrid)
# Summarize accuracy of models including the tuned radial model
fit_models <- list(Linear = svm_linear, Radial = svm_radial, TunedRadial = fit_svm_radial_tune)
results <- resamples(fit_models)
print(summary(results))
# ROC plots
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
roc_data_radial_tuned <- roc(response=fit_svm_radial_tune$pred$obs, predictor=fit_svm_radial_tune$pred$X1)
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
plot(roc_data_radial, add=TRUE, col="red")
legend("bottomright", legend=c("Linear SVM", "Radial SVM"), col=c("blue", "red"), lwd=2)
plot(roc_data_radial_tuned)
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
# ROC plots
roc_data_linear <- roc(response=svm_linear$pred$obs, predictor=svm_linear$pred$X1)
roc_data_radial <- roc(response=svm_radial$pred$obs, predictor=svm_radial$pred$X1)
roc_data_radial_tuned <- roc(response=fit_svm_radial_tune$pred$obs, predictor=fit_svm_radial_tune$pred$X1)
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
plot(roc_data_radial, add=TRUE, col="red")
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
plot(roc_data_radial, add=TRUE, col="red")
plot(roc_data_radial_tuned, add=TRUE, col="green")
plot(roc_data_linear, main="ROC Curve for Linear SVM", col="blue")
plot(roc_data_radial, add=TRUE, col="red")
plot(roc_data_radial_tuned, add=TRUE, col="green")
legend("bottomright", legend=c("Linear SVM", "Radial SVM", "Radial Tuned SVM"), col=c("blue", "red", "green"), lwd=2)
